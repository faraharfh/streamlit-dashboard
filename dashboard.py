# -*- coding: utf-8 -*-
"""Proyek Analisis Data - Farah Arifah F A.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XunIFOq-WVsvu-yvX1W01JTTqRICKl9_

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** [Farah Arifah F A]
- **Email:** [blue.chintya@gmail.com]
- **ID Dicoding:** [faraharfh]

## Menentukan Pertanyaan Bisnis

- 1. Bagaimana tren penjualan bulanan di platform e-commerce ini?
- Produk apa yang memiliki jumlah penjualan tertinggi?

## Import Semua Packages/Library yang Digunakan
"""

# Import Library
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import subprocess

# Title
st.title("Dashboard E-Commerce")

# Load dataset
# @st.cache
# def load_data():
#    return pd.read_csv('orders_dataset.csv')

@st.cache
def load_data():
    return pd.read_csv('orders_dataset.csv')


data = load_data()



# Display dataset
st.write("Dataset:")
st.dataframe(data)

# Visualisasi
st.write("Visualisasi Pesanan per Bulan")
monthly_orders = data['order_purchase_timestamp'].str[:7].value_counts().sort_index()
st.bar_chart(monthly_orders)

# Install gdown untuk menarik data dari google drive
# !pip install gdown
subprocess.run(["pip", "install", "gdown"])

# Import data dari google drive
import gdown

# List dari file ID Google Drive
file_ids = [
    '14xAIpMIQxr-7jNUppJ6eg7fHlZ6qBRt6', '1fYGJEnCSLbl94xFAfR-dxOBTm0lZN_Fh', '1F7lD0rIfTY5fxxRXkxZ0PqwKfesSF9pO', '11S-RvR58X94mRxf8xdUDz4-wlkMYRo28', '1wXrYGdMp4EqtY0jx_AXLc_T5OKekEaOZ',
    '1W1NA6HbDCo4enkmnFlUpu4v6LaqVlsr3', '1ijcr-dIyLmBYnUaLWossjONUex3MUZrV', '15wluWYkIh4N2NPFAbllSJJLl5dC7wWzS', '1MOrAUNLH6rG682dVJmCFgtjMfeqyz0LY', '1jcb7cWWdzmE6zgJjveEo65aJjwyk1s1e'
]
file_names = [
    'sellers_dataset.csv',
    'products_dataset.csv',
    'product_category_name_translation_dataset.csv',
    'orders_dataset.csv',
    'order_reviews_dataset.csv',
    'order_payments_dataset.csv',
    'order_items_dataset.csv',
    'geolocation_dataset.csv',
    'customers_dataset.csv',
    'New Text Document.csv',
]

for file_id, file_name in zip(file_ids, file_names):
    url = f'https://drive.google.com/uc?export=download&id={file_id}'
    gdown.download(url, file_name, quiet=False)



# Initialize an empty list to hold the DataFrames
dataframes = []

# Load each file into a DataFrame
for file_name in file_names:
    try:
        df = pd.read_csv(file_name)
        df['source_file'] = file_name  # Add a column to track the file origin
        dataframes.append(df)
    except Exception as e:
        print(f"Error loading {file_name}: {e}")

# Combine all DataFrames into one
all_df = pd.concat(dataframes, ignore_index=True)

# Save the combined DataFrame to a CSV file
all_df.to_csv('all_data.csv', index=False)

# Install Streamlit
# !pip install streamlit
subprocess.run(["pip", "install", "streamlit"])

# Cek Versi Streamlit 
# !streamlit --version
subprocess.run(["streamlit", "--version"])

# Menjalankan Streamlit
# !streamlit run app.py
subprocess.run(["streamlit", "run", "app.py"])

# Menjalankan Streamlit
# !pip list | grep "streamlit\|babel"
subprocess.run(["pip", "list"])


"""## Data Wrangling

### Gathering Data
"""

# Preview data
customers_df = pd.read_csv("customers_dataset.csv")
customers_df.head()

# Preview data
geolocation_df = pd.read_csv("geolocation_dataset.csv")
geolocation_df.head()

# Preview data
order_items_df = pd.read_csv("order_items_dataset.csv")
order_items_df.head()

# Preview data
order_payments_df = pd.read_csv("order_payments_dataset.csv")
order_payments_df.head()

# Preview data
order_reviews_df = pd.read_csv("order_reviews_dataset.csv")
order_reviews_df.head()

# Preview data
orders_df = pd.read_csv("orders_dataset.csv")
orders_df.head()

# Preview data
product_category_name_translation_df = pd.read_csv("product_category_name_translation_dataset.csv")
product_category_name_translation_df.head()

# Preview data
products_df = pd.read_csv("products_dataset.csv")
products_df.head()

# Preview data
sellers_df = pd.read_csv("sellers_dataset.csv")
sellers_df.head()

"""**Insight:**
- Di tahap ini telah berhasil memuat semua data yang dibutuhkan. Tahap selanjutnya ialah menilai kualitas dari data tersebut.

### Assessing Data
"""

# Untuk cek ringkasan data
customers_df.info()

# Cek data yang duplikasi
print("Jumlah duplikasi: ", customers_df.duplicated().sum())

# Cek jumlah nilai data yang hilang
customers_df.isnull().sum()

# Untuk cek ringkasan data
geolocation_df.info()

# Cek data yang duplikasi
print("Jumlah duplikasi: ",geolocation_df.duplicated().sum())
geolocation_df.describe()

# Cek jumlah nilai data yang hilang
geolocation_df.isnull().sum()

# Untuk cek ringkasan data
order_items_df.info()

# Cek data yang duplikasi
print("Jumlah duplikasi: ",order_items_df.duplicated().sum())
order_items_df.describe()

# Cek jumlah nilai data yang hilang
order_items_df.isnull().sum()

# Untuk cek ringkasan data
order_payments_df.info()

# Cek data yang duplikasi
print("Jumlah duplikasi: ",order_payments_df.duplicated().sum())
order_payments_df.describe()

# Cek jumlah nilai data yang hilang
order_payments_df.isnull().sum()

# Untuk cek ringkasan data
order_reviews_df.info()

# Cek jumlah nilai data yang hilang
order_reviews_df.isnull().sum()

# Cek data yang duplikasi
print("Jumlah duplikasi: ",order_reviews_df.duplicated().sum())
order_reviews_df.describe()

# Untuk cek ringkasan data
orders_df.info()

# Cek ringkasan statistik kolom numerik
orders_df.describe()

# Cek jumlah nilai data yang hilang
orders_df.isnull().sum()

# Membuat summary data
product_category_name_translation_df.info()

# Cek data yang duplikasi
print("Jumlah duplikasi: ", product_category_name_translation_df.duplicated().sum())

product_category_name_translation_df.describe()

# Count missing values
product_category_name_translation_df.isnull().sum()

# Untuk cek ringkasan data
products_df.info()

# Cek data yang duplikasi
print("Jumlah duplikasi: ", products_df.duplicated().sum())

products_df.describe()

# Cek missing values
products_df.isnull().sum()

# Untuk cek ringkasan data
sellers_df.info()

# Cek data yang duplikasi
print("Jumlah duplikasi: ", sellers_df.duplicated().sum())
sellers_df.describe()

# Cek jumlah nilai data yang hilang
sellers_df.isnull().sum()

"""**Insight:**
- geolocation_df: Terdapat 261831 data yang duplikat. Tetapi karena memang titik lokasi ada yang persis jadi tidak di ubah.
- order_reviews_df: Terdapat 87656 missing values pada kolom review_comment_title dan 58247 pada review_comment_message.
- orders_df: Terdapat kesalahan tipe data pada tanggal yang seharusnya menggunakan datetime, untuk kolom order_approved_at, order_delivered_carrier_date, order_delivered_customer_date, dan order_estimated_delivery_date. Terdapat 160 missing values pada kolom order_approved_at, 1783 pada kolom order_delivered_carrier_date dan 2965 pada kolom order_delivered_customer_date.
- products_df: Terdapat kesalahan tipe data seharusnya int64 untuk numeric, pada kolom: product_name_lenght, product_description_lenght, product_photos_qty, product_weight_g, product_length_cm, product_height_cm, dan product_width_cm.  Terdapat 610 missing values pada kolom product_category_name, product_name_lenght, product_description_lenght, dan product_photos_qty. Dan 2 missing values pada kolom product_weight_g, product_length_cm, product_height_cm, dan product_width_cm. Terdapat kesalahan penulisan pada kolom product_name_lenght ("lenght" seharusnya "length‚Äù).

### Cleaning Data
"""

# Cek NaN atau missing values
order_reviews_df[order_reviews_df.review_comment_title.isna()]

#Cek frekuensi unique values
order_reviews_df.review_comment_title.value_counts()

# Mengganti missing values with "No Response"
order_reviews_df['review_comment_title'] = order_reviews_df['review_comment_title'].fillna("No Response")

# Filter missing values

order_reviews_df[order_reviews_df.review_comment_title.isna()]

# Filter missing values
order_reviews_df[order_reviews_df.review_comment_message.isna()]

# Hitung frekuensi unique values
order_reviews_df.review_comment_message.value_counts()

# Filled NaN with "No Response"
order_reviews_df['review_comment_message'] = order_reviews_df['review_comment_message'].fillna("No Response")

# Filter missing values
order_reviews_df[order_reviews_df.review_comment_message.isna()]

# Mengubah format ke DateTime
datetime_columns = ["order_purchase_timestamp", "order_approved_at", "order_delivered_carrier_date", "order_delivered_customer_date", "order_estimated_delivery_date"]

for column in datetime_columns:
  orders_df[column] = pd.to_datetime(orders_df[column])

# Cek ringkasan informasi
orders_df.info()

# Mengganti nama kolom
products_df.rename(columns={"product_name_lenght": "product_name_length"}, inplace=True)

# Cek ringkasan informasi
products_df.info()

# Rename kolom karena typo "lenght" menjadi "length"
products_df.rename(columns={"product_description_lenght": "product_description_length"}, inplace=True)

# Cek ringkasan informasi
products_df.info()

# Mengganti missing values dengan 0
products_df["product_name_length"] = products_df["product_name_length"].fillna(0)
products_df["product_description_length"] = products_df["product_description_length"].fillna(0)
products_df["product_photos_qty"] = products_df["product_photos_qty"].fillna(0)
products_df["product_weight_g"] = products_df["product_weight_g"].fillna(0)
products_df["product_length_cm"] = products_df["product_length_cm"].fillna(0)
products_df["product_height_cm"] = products_df["product_height_cm"].fillna(0)
products_df["product_width_cm"] = products_df["product_width_cm"].fillna(0)

# Mengganti missing values dengan "Not Available"
products_df["product_category_name"] = products_df["product_category_name"].fillna("Not Available")

# Cek ringkasan informasi
products_df.info()

"""**Insight:**
- Order_reviews_df: Missing value sudah diganti dengan value "No Response".
- Orders_df: Kesalahan tipe data sudah diubah menjadi datetime. Untuk missing values tidak akan diubah, karena jika diubah "Not Available" maka format datetime ikut berubah menjadi object.
- Products_df: Kesalahan tipe data sudah diganti menjadi int64. Missing value sudah di ubah menjadi "0" pada format int64 dan "Not Available" pada format object. Kesalahan penulisan sudah diubah dari "lenght" menjadi "length"

## Exploratory Data Analysis (EDA)

### Explore ...

Bagaimana tren penjualan bulanan di platform e-commerce ini?
"""

# Filter data dengan status "Delivered"
delivered_orders = orders_df[orders_df['order_status'] == 'delivered'].copy()

# Menambahkan informasi waktu
delivered_orders['order_month'] = pd.to_datetime(delivered_orders['order_delivered_customer_date']).dt.to_period('M')

# Menghitung jumlah pesanan per bulan
monthly_sales = delivered_orders.groupby('order_month').size().reset_index(name='order_count')

# Mengurutkan data penjualan secara ascending
monthly_sales = monthly_sales.sort_values(by='order_month')

"""Produk apa yang memiliki jumlah penjualan tertinggi?"""

# Menggabungkan dua DataFrame
product_sales = pd.merge(order_items_df, products_df, on='product_id')

# Menganalisa produk terbaik
product_sales_summary = product_sales.groupby('product_category_name')['order_item_id'].count().reset_index()

product_sales_summary.rename(columns={'order_item_id': 'total_sales'}, inplace=True)

top_products = product_sales_summary.sort_values(by='total_sales', ascending=False).head(10)

# Cek summary data
translation_df = pd.read_csv('product_category_name_translation_dataset.csv')

print(translation_df.head())

# Menggabungkan data terjemahan
product_sales_translated = pd.merge(product_sales, translation_df, on='product_category_name', how='left')

print(product_sales_translated[['product_category_name', 'product_category_name_english']].head())

# Menganalisa 10 produk terlaris
top_products = product_sales_translated.groupby('product_category_name_english')['order_item_id'].count().reset_index()
top_products.rename(columns={'order_item_id': 'total_sales'}, inplace=True)

top_products = top_products.sort_values(by='total_sales', ascending=False).head(10)

"""## Visualization & Explanatory Analysis

### Pertanyaan 1:

Bagaimana tren penjualan bulanan di platform e-commerce ini?
"""

# Visualisasi tren penjualan bulanan
# import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plt.plot(monthly_sales['order_month'].astype(str), monthly_sales['order_count'], marker='o', color='blue')
plt.title('Monthly Sales Trend on E-Commerce Platform', fontsize=16)
plt.xlabel('Month', fontsize=12)
plt.ylabel('Number of Delivered Orders', fontsize=12)
plt.xticks(rotation=45)
plt.grid()
plt.tight_layout()
plt.show()

"""1. Berdasarkan rangkuman parameter statistik di atas, kita akan memperoleh informasi jumlah penjualan terbanyak pada bulan November 2017 sebanyak 7289 order.

### Pertanyaan 2:

Produk apa yang memiliki jumlah penjualan tertinggi?

> Add blockquote
"""

# Visualisasi produk penjualan tertinggi
plt.figure(figsize=(12, 6))
plt.bar(top_products['product_category_name_english'], top_products['total_sales'], color='green')

plt.title('Top 10 Product Categories by Sales (Translated to English)', fontsize=16)
plt.xlabel('Product Category (English)', fontsize=12)
plt.ylabel('Total Sales', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()

plt.show()

"""Produk yang memiliki jumlah penjualan tertinggi adalah bed bath table.

## Conclusion

- Conclution pertanyaan 1: Penjualan terbanyak pada bulan November 2017 sebanyak 7289 order.
- Conclution pertanyaan 2: Produk dengan penjualan tertinggi adalah bed bath table.
"""


